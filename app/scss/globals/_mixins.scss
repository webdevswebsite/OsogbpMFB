// -------------------------------------------------------------------------
// Positioning
// -------------------------------------------------------------------------

// Accepts 's, r, a, f' as shorthands"
@mixin position($shorthand, $offsets) {
  @if $shorthand != null {
    @if $shorthand == 's' or $shorthand == 'static' {
      position: static;
    } @else if $shorthand == 'r' or $shorthand == 'relative' {
      position: relative;
    } @else if $shorthand == 'a' or $shorthand == 'absolute' {
      position: absolute;
    } @else if $shorthand == 'f' or $shorthand == 'fixed' {
      position: fixed;
    }
  }
  // position ALL the offsets
  @if length($offsets) == 1 {
    // save me writing four times
    $position-property: top, right, bottom, left;
    @if $offsets != none {
      @each $property in $position-property {
        #{$property}: $offsets;
      }
    }
  } @else if length($offsets) == 2 {
    @if nth($offsets, 1) != none {
      bottom: nth($offsets, 1);
      top: nth($offsets, 1);
    }
    @if nth($offsets, 2) != none {
      left: nth($offsets, 2);
      right: nth($offsets, 2);
    }
  } @else if length($offsets) == 3 {
    @if nth($offsets, 1) != none {
      top: nth($offsets, 1);
    }
    @if nth($offsets, 2) != none {
      left: nth($offsets, 2);
      right: nth($offsets, 2);
    }
    @if nth($offsets, 3) != none {
      bottom: nth($offsets, 3);
    }
  } @else if length($offsets) == 4 {
    @if nth($offsets, 1) != none {
      top: nth($offsets, 1);
    }
    @if nth($offsets, 2) != none {
      right: nth($offsets, 2);
    }
    @if nth($offsets, 3) != none {
      bottom: nth($offsets, 3);
    }
    @if nth($offsets, 4) != none {
      left: nth($offsets, 4);
    }
  }
}



// -------------------------------------------------------------------------
// Responsive Properties
// -------------------------------------------------------------------------

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-prop($prop, $min-vw-value, $max-vw-value, $min-vw: $grid-breakpoint-xs, $max-vw: $grid-breakpoint-lg, $inverted: false, $limit-min: false, $limit-max: false) {
  $min-value: $min-vw-value;
  $max-value: $max-vw-value;

  @if $inverted {
    $min-value: $max-vw-value;
    $max-value: $min-vw-value;
  }

  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-value);
  $u4: unit($max-value);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      @if $limit-min == false {
        #{$prop}: $min-value;
      }
      @if $limit-max == false {
        @media screen and (min-width: $min-vw) {
          #{$prop}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
        }
        @media screen and (min-width: $max-vw) {
          #{$prop}: $max-value;
        }
      } @else {
        @media screen and (min-width: $min-vw) and (max-width: $max-vw){
          #{$prop}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
        }
      }
    }
  }
}


// -------------------------------------------------------------------------
// Button themes
// -------------------------------------------------------------------------

@mixin set-theme-colors($theme) {
  // theme color positions:
  $foreground-color: 1;
  $background-color: 2;
  $border-color: 3;

  color: nth($theme, $foreground-color);
  background-color: nth($theme, $background-color);
  border-color: nth($theme, $border-color);

  .icon {
    fill: nth($theme, $foreground-color);
  }
}

@mixin btn-color-themes($normal, $hover: null, $active: null, $focus: null) {
  @if $normal != null {
    @include set-theme-colors($normal);
  }
  @if $hover != null {
    &:hover {
      @include set-theme-colors($hover);
    }
  }
  @if $active != null {
    &:active {
      @include set-theme-colors($active);
    }
  }
  @if $focus != null {
    &:focus {
      @include set-theme-colors($focus);
    }
  }
}
